name: Build and Release

on:
  workflow_call:
    inputs:
      skip_ci:
        required: false
        type: boolean
        default: false
      commit_sha:
        required: true
        type: string
permissions:
  contents: write
  packages: write

jobs:
  release:
    name: 'Semantic Release NodeJS'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ '18.x' ]
    outputs:
      NEW_TAG: ${{ steps.tag-version.outputs.NEW_TAG }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_sha }}
          fetch-depth: '0'

      - name: Use Node.js ${{ matrix.node-version }}
        if: ${{ !inputs.skip_ci }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        if: ${{ !inputs.skip_ci }}
        run: yarn install --frozen-lockfile

      - name: Run Build
        run: yarn build
        if: ${{ !inputs.skip_ci }}

      - name: Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Get release tag version
        id: tag-version
        run: |
          NEW_TAG=$( git tag --sort=v:refname | tail -n 1 )
          echo "NEW_TAG=$NEW_TAG" >> "$GITHUB_OUTPUT"
  release-docker:
    name: 'Build and Release Docker Image'
    runs-on: ubuntu-latest
    needs: release
    env:
      IMAGE_NAME: ${{ github.repository }}:${{ needs.release.outputs.NEW_TAG }}
    steps:
      - name: Login to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ env.IMAGE_NAME }}
  branch-mapping:
    name: 'Branch to Environment'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - name: Branch Mapping
        id: environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=devnet" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=main" >> "$GITHUB_OUTPUT"
          else
            echo "::error::Unsupported branch"
            exit 1
          fi
  release-helm:
    name: 'Release Helm Chart'
    needs: [release, release-docker, branch-mapping]
    uses: ixofoundation/ixo-github-actions/.github/workflows/node-ci-deploy.yml@main
    secrets: inherit
    with:
      environment: ${{ needs.branch-mapping.outputs.environment }}
      version: ${{ needs.release.outputs.NEW_TAG }}
# Notes for Deployment
# TestNet will be deployed using the latest release image ^
# Main will require deployment review and if approved use the latest release image ^