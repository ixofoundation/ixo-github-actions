name: Build and Release

on:
  workflow_call:
    inputs:
      docker_image_scanning:
        required: false
        type: boolean
        default: true

jobs:
  branch-mapping:
    name: 'Branch to Environment'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - name: Branch Mapping
        id: environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=devnet" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "environment=testnet" >> "$GITHUB_OUTPUT"
          else
            echo "::error::Unsupported branch"
            exit 1
          fi
  # We create a PR Release if there is a changesets file. if there is no changesets file and a package.json version is updated (e.g. merged PR), it is a Release.
  release:
    name: "[Create PR Release] OR [Create Github Tags & Release]"
    permissions:
      contents: write
      packages: write
      pull-requests: write
    timeout-minutes: 20
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changeset.outputs.published }}
      publishedPackages: ${{ steps.changeset.outputs.publishedPackages }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v3

      - name: "Setup Pnpm 9.0"
        uses: pnpm/action-setup@v2
        with:
          version: 9.0

      - name: "Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "Create Release Pull Request"
        id: changeset
        uses: changesets/action@v1
        with:
          version: pnpm run version
          publish: pnpm run release
          commit: "chore: new release"
          title: "chore: new release candidate"
          createGithubReleases: 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{secrets.npm_token}}
  release-docker:
    name: 'Build and Release Docker Image(s)'
    runs-on: buildjet-4vcpu-ubuntu-2204
    needs: release
    if: needs.release.outputs.published == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.release.outputs.publishedPackages) }}
    env:
      IMAGE_TAG: ${{ matrix.package.version }}
    steps:
      - name: Set image name
        id: set-image-name
        run: |
          PACKAGE_NAME="${{ matrix.package.name }}"
          FORMATTED_NAME="${PACKAGE_NAME//@/}"
          FORMATTED_NAME="${FORMATTED_NAME//\//-}"
          echo "image_name=ghcr.io/${{ github.repository }}/${FORMATTED_NAME}" >> $GITHUB_OUTPUT

      - name: Login to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          file: ./Dockerfile
          build-args: |
            PROJECT=${{ matrix.package.name }}
          push: true
          tags: |
            ${{ steps.set-image-name.outputs.image_name }}:${{ env.IMAGE_TAG }}
            ${{ steps.set-image-name.outputs.image_name }}:latest
  security-scan:
    name: 'Docker Security Scan'
    runs-on: ubuntu-latest
    needs: [release, release-docker]
    if: needs.release.outputs.published == 'true' && inputs.docker_image_scanning
    continue-on-error: true
    strategy:
      matrix:
        package: ${{ fromJSON(needs.release.outputs.publishedPackages) }}
    env:
      IMAGE_TAG: ${{ matrix.package.version }}
    steps:
      - name: Set image name # Duplicated from release-docker job due to matrix strategy limitations
        id: set-image-name
        run: |
          PACKAGE_NAME="${{ matrix.package.name }}"
          FORMATTED_NAME="${PACKAGE_NAME//@/}"
          FORMATTED_NAME="${FORMATTED_NAME//\//-}"
          echo "image_name=ghcr.io/${{ github.repository }}/${FORMATTED_NAME}" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.31.0
        continue-on-error: true
        with:
          image-ref: '${{ steps.set-image-name.outputs.image_name }}:${{ env.IMAGE_TAG }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Fail if critical/high vulnerabilities found (currently will not fail - set to exit code 0)

      # - name: Upload Trivy scan results to GitHub Security tab # Populate to Github , TODO look into if this is needed
      #   uses: github/codeql-action/upload-sarif@v3
      #   if: always()
      #   with:
      #     sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner for readable output # Readable from Logs
        uses: aquasecurity/trivy-action@0.31.0
        continue-on-error: true
        if: always()
        with:
          image-ref: '${{ steps.set-image-name.outputs.image_name }}:${{ env.IMAGE_TAG }}'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'

  filter-packages:
    name: 'Filter Packages for Deployment'
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.published == 'true'
    outputs:
      deployable_packages: ${{ steps.filter.outputs.deployable_packages }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Filter deployable packages
        id: filter
        run: |
          # Parse the published packages
          PACKAGES='${{ needs.release.outputs.publishedPackages }}'
          
          # Create a temporary file to build our deployable packages array
          echo "[]" > deployable.json
          
          # Loop through each package and check if it's in the apps directory
          for PACKAGE_INFO in $(echo "$PACKAGES" | jq -c '.[]'); do
            PACKAGE_NAME=$(echo "$PACKAGE_INFO" | jq -r '.name')
            
            # Extract package name without scope
            BASE_NAME="${PACKAGE_NAME#*/}"
            
            # Check if this package is in the apps directory (not in packages directory)
            if [[ -d "apps/$BASE_NAME" || -d "apps/$PACKAGE_NAME" ]]; then
              # Add this package to deployable packages JSON
              jq --argjson pkg "$PACKAGE_INFO" '. += [$pkg]' deployable.json > temp.json && mv temp.json deployable.json
              echo "Package $PACKAGE_NAME is deployable"
            else
              echo "Package $PACKAGE_NAME is not deployable (not in apps directory)"
            fi
          done
          
          # Read the final JSON array
          DEPLOYABLE_PACKAGES=$(cat deployable.json | jq -c .)
          
          # Output the deployable packages as JSON
          echo "deployable_packages=$DEPLOYABLE_PACKAGES" >> $GITHUB_OUTPUT
  deploy-ixoworld-workaround:
    name: 'Release Helm Chart(s)'
    needs: [ release, release-docker, security-scan, branch-mapping, filter-packages ]
    if: github.repository_owner == 'ixoworld' && needs.filter-packages.result == 'success' && needs.filter-packages.outputs.deployable_packages != '[]' && (always() && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped' || needs.security-scan.result == 'failure'))
    uses: ixoworld/ixo-github-actions/.github/workflows/node-ci-deploy.yml@main
    strategy:
      matrix:
        package: ${{ fromJSON(needs.filter-packages.outputs.deployable_packages) }}
    secrets: inherit
    with:
      environment: ${{ needs.branch-mapping.outputs.environment }}
      version: ${{ matrix.package.version }}
      chartName: ${{ github.repository }}-${{ matrix.package.name }}
  deploy:
    name: 'Release Helm Chart(s)'
    needs: [ release, release-docker, security-scan, branch-mapping, filter-packages ]
    if: github.repository.owner == 'ixofoundation' && needs.filter-packages.result == 'success' && needs.filter-packages.outputs.deployable_packages != '[]' && (always() && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped' || needs.security-scan.result == 'failure'))
    uses: ixofoundation/ixo-github-actions/.github/workflows/node-ci-deploy.yml@main
    strategy:
      matrix:
        package: ${{ fromJSON(needs.filter-packages.outputs.deployable_packages) }}
    secrets: inherit
    with:
      environment: ${{ needs.branch-mapping.outputs.environment }}
      version: ${{ matrix.package.version }}
      chartName: ${{ github.repository }}-${{ matrix.package.name }}