name: Build and Release Python

on:
  workflow_call:
    inputs:
      python_version:
        required: false
        type: string
        default: '3.11'
      skip_ci:
        required: false
        type: boolean
        default: false
      commit_sha:
        required: true
        type: string
      docker_image_scanning:
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  validate-commit:
    name: 'Validate Commit'
    runs-on: ubuntu-latest
    outputs:
      is_merge_commit: ${{ steps.check_merge_commit.outputs.is_merge_commit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_sha }}
          fetch-depth: 2

      - id: check_merge_commit
        name: Check if merge commit
        run: |
          PARENT_COUNT=$(git cat-file -p HEAD | grep '^parent ' | wc -l)
          if [ $PARENT_COUNT -gt 1 ]; then
            echo "is_merge_commit=true" >> $GITHUB_OUTPUT
          else
            echo "is_merge_commit=false" >> $GITHUB_OUTPUT
          fi

  python-ci:
    name: 'Python CI'
    runs-on: ubuntu-latest
    needs: validate-commit
    if: ${{ !inputs.skip_ci }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_sha }}

      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install Python dependencies
        run: uv sync --extra dev

      - name: Run Python checks
        run: |
          uv run ruff check
          uv run pyright .
          uv run pytest
          uv run bandit -r . -f json -o bandit-report.json

  build-and-publish:
    name: 'Build and Publish'
    runs-on: ubuntu-latest
    needs: [validate-commit, python-ci]
    if: ${{ always() && (inputs.skip_ci || needs.python-ci.result == 'success') }}
    outputs:
      image_tag: ${{ steps.get_tag.outputs.image_tag }}
      image_digest: ${{ steps.docker_push.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_sha }}

      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install Python dependencies
        run: uv sync --extra dev

      - id: get_tag
        name: Get Git Tag
        run: |
          # Check if the current commit has a tag
          TAG=$(git describe --tags --exact-match ${{ inputs.commit_sha }} 2>/dev/null || echo "")
          if [ -n "$TAG" ]; then
            echo "image_tag=$TAG" >> $GITHUB_OUTPUT
          else
            # Use short commit hash if no tag
            SHORT_SHA=$(echo ${{ inputs.commit_sha }} | cut -c1-7)
            echo "image_tag=main-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Python Semantic Release
        if: ${{ needs.validate-commit.outputs.is_merge_commit == 'false' }}
        run: uv run semantic-release version
        env:
          GH_TOKEN: ${{ secrets.GHCR_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - id: docker_push
        name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.get_tag.outputs.image_tag }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  scan-image:
    name: 'Scan Docker Image'
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: ${{ inputs.docker_image_scanning && always() && needs.build-and-publish.result == 'success' }}
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ needs.build-and-publish.outputs.image_tag }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

# Notes for Deployment
# TestNet will be deployed using the latest release image ^
# Main will require deployment review and if approved use the latest release image ^ 